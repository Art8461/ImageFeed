//
//  OAuth2Service.swift
//  ImageFeed
//
//  Created by Artem Kuzmenko on 01.09.2025.
//

import Foundation

final class OAuth2Service {
    static let shared = OAuth2Service()
    private init() {}

    func fetchOAuthToken(_ code: String, completion: @escaping (Result<String, Error>) -> Void) {
        guard let url = URL(string: "https://unsplash.com/oauth/token") else {
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞")
            completion(.failure(NSError(domain: "OAuth2", code: 0, userInfo: [NSLocalizedDescriptionKey: "Invalid URL"])))
            return
        }
        print("‚û°Ô∏è –§–æ—Ä–º–∏—Ä—É–µ–º POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
        
        let bodyComponents = [
            "client_id=\(Constants.accessKey)",
            "client_secret=\(Constants.secretKey)",
            "redirect_uri=\(Constants.redirectURI)",
            "code=\(code)",
            "grant_type=authorization_code"
        ]
        let bodyString = bodyComponents.joined(separator: "&")
        request.httpBody = bodyString.data(using: .utf8)
        print("‚ÑπÔ∏è –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: \(bodyString)")
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: \(error)")
                DispatchQueue.main.async { completion(.failure(error)) }
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç HTTP-–æ—Ç–≤–µ—Ç–∞")
                DispatchQueue.main.async { completion(.failure(NSError(domain: "OAuth2", code: 0, userInfo: [NSLocalizedDescriptionKey: "No HTTP response"]))) }
                return
            }
            
            print("‚ÑπÔ∏è HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥:", httpResponse.statusCode)
            
            guard let data = data else {
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                DispatchQueue.main.async {
                    completion(.failure(NSError(domain: "OAuth2", code: 0, userInfo: [NSLocalizedDescriptionKey: "No data"])))
                }
                return
            }

            print("üì© –û—Ç–≤–µ—Ç Unsplash: \(String(data: data, encoding: .utf8) ?? "nil")")
            
            do {
                let tokenResponse = try JSONDecoder().decode(OAuthTokenResponseBody.self, from: data)
                let accessToken = tokenResponse.accessToken
                OAuth2TokenStorage.shared.token = accessToken
                print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:", accessToken)
                DispatchQueue.main.async { completion(.success(accessToken)) }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error)
                DispatchQueue.main.async {
                    completion(.failure(NSError(domain: "OAuth2", code: 0, userInfo: [NSLocalizedDescriptionKey: "Token parsing failed: \(error)"])))
                }
            }
        }
        task.resume()
    }
}
